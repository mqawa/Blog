<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>碎碎念 - 我的云服务（一）</title>
      <link href="/22021201.html"/>
      <url>/22021201.html</url>
      
        <content type="html"><![CDATA[<hr><p>&emsp;<strong>因工作和学习需求，博主无法随身携带笔记本电脑，但博客源码又无法在多台电脑间同步，这对我造成很大的困扰</strong></p><h2 id="code-server"><a href="#code-server" class="headerlink" title="code-server"></a>code-server</h2><p>&emsp;<strong>code-server 是一款基于 VS Code 的在线编辑器,主要用于在 Linux 服务器环境下,实现任何设备通过浏览器即可访问 VS Code, 进而实现远程编程</strong><br>&emsp;<strong>目前 code-server 开源在 Github : <a href="https://github.com/coder/code-server">https://github.com/coder/code-server</a></strong><br>&emsp;<strong>这是搭建完成后的样子，和 VS Code 简直一模一样</strong></p><p><img src="https://res.mqawa.cn/blog-res/images/talk/code-server/code-server.png" alt=""></p><hr><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="查看-Linux-系统架构"><a href="#查看-Linux-系统架构" class="headerlink" title="查看 Linux 系统架构"></a>查看 Linux 系统架构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure><p><img src="https://res.mqawa.cn/blog-res/images/talk/code-server/uname.png" alt=""></p><h3 id="下载对应版本-code-server"><a href="#下载对应版本-code-server" class="headerlink" title="下载对应版本 code-server"></a>下载对应版本 code-server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/coder/code-server/releases/download/v4.0.2/code-server-4.0.2-linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><h3 id="解压并移动到-usr-local-目录"><a href="#解压并移动到-usr-local-目录" class="headerlink" title="解压并移动到 /usr/local 目录"></a>解压并移动到 /usr/local 目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf code-server-4.0.2-linux-amd64.tar.gz</span><br><span class="line">mv code-server-4.0.2-linux-amd64.tar.gz/ /usr/<span class="built_in">local</span>/code-server</span><br></pre></td></tr></table></figure><hr><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/code/server</span><br><span class="line"><span class="built_in">export</span> PASSWORD=<span class="string">&quot;password&quot;</span> &amp;&amp; ./code-server --host 0.0.0.0 --port 8080</span><br><span class="line"><span class="comment"># password 为密码 --port 后面为自定义端口</span></span><br></pre></td></tr></table></figure><p><img src="https://res.mqawa.cn/blog-res/images/talk/code-server/success.png" alt=""></p><p>&emsp;<strong>启动成功</strong></p><hr><h2 id="配置code-server-后台运行"><a href="#配置code-server-后台运行" class="headerlink" title="配置code-server 后台运行"></a>配置code-server 后台运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">screen</span><br><span class="line"><span class="built_in">export</span> PASSWORD=<span class="string">&quot;password&quot;</span> &amp;&amp; ./code-server --host 0.0.0.0 --port 8080</span><br></pre></td></tr></table></figure><p>&emsp;<strong>按 <kbd>Ctrl</kbd> + <kbd>A</kbd> + <kbd>D</kbd> 退出会话</strong><br>&emsp;<strong>现在，code-server 已经在后台运行了，你可以访问 ip + 端口来使用 code-server</strong><br>&emsp;<strong>使用 code-server 编辑文章，在线预览，发布</strong></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>&emsp;<strong>按 <kbd>Ctrl</kbd> + <kbd>`</kbd> 打开 code-server 终端</strong><br>&emsp;<strong>在扩展商店搜索 chinese 安装简体中文扩展</strong><br><img src="https://res.mqawa.cn/blog-res/images/talk/code-server/chinese.png" alt=""></p><hr>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
            <tag> 云服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>碎碎念 - 站点更新记录</title>
      <link href="/22010701.html"/>
      <url>/22010701.html</url>
      
        <content type="html"><![CDATA[<hr><div class="note danger simple"><p>此文章已删除</p></div><hr>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chrome 插件分享</title>
      <link href="/22010401.html"/>
      <url>/22010401.html</url>
      
        <content type="html"><![CDATA[<hr><p><strong>本站资源仅供技术交流，请勿用于商业及非法用途，如产生法律纠纷与本站无关</strong></p><hr><h2 id="Tampermonkey-油猴脚本管理器"><a href="#Tampermonkey-油猴脚本管理器" class="headerlink" title="Tampermonkey - 油猴脚本管理器"></a>Tampermonkey - 油猴脚本管理器</h2><p>官方网站 : <a href="https://www.tampermonkey.net/">https://www.tampermonkey.net/</a><br>Chrome 商店 : <a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo">链接太长了…..</a></p><hr><h2 id="Adblock-Plus-享受没有恼人广告的网络世界"><a href="#Adblock-Plus-享受没有恼人广告的网络世界" class="headerlink" title="Adblock Plus - 享受没有恼人广告的网络世界"></a>Adblock Plus - 享受没有恼人广告的网络世界</h2><p>官方网站 : <a href="https://adblockplus.org/">https://adblockplus.org/</a><br>Chrome 商店 : <a href="https://chrome.google.com/webstore/detail/adblock-plus-free-ad-bloc/cfhdojbkjhnklbpkdaibdccddilifddb">链接太长了…..</a></p><hr><h2 id="Octotree-Github-代码树"><a href="#Octotree-Github-代码树" class="headerlink" title="Octotree - Github 代码树"></a>Octotree - Github 代码树</h2><p>官方网站 : <a href="https://www.octotree.io/">https://www.octotree.io/</a><br>Chrome 商店 : <a href="https://chrome.google.com/webstore/detail/octotree-github-code-tree/bkhaagjahfmjljalopjnoealnfndnagc">链接太长了…..</a></p><hr><h2 id="Bookmarkie-在弹窗中查看、管理你的书签"><a href="#Bookmarkie-在弹窗中查看、管理你的书签" class="headerlink" title="Bookmarkie - 在弹窗中查看、管理你的书签"></a>Bookmarkie - 在弹窗中查看、管理你的书签</h2><p>开源地址 : <a href="https://github.com/angusjune/bookmarkie">https://github.com/angusjune/bookmarkie</a><br>Chrome 商店 : <a href="https://chrome.google.com/webstore/detail/bookmarkie-bookmarks-in-a/ahlphbdcaacfhkiajebghpngknafklbj">链接太长了…..</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> 资源分享 </category>
          
          <category> 软件资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资源分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ I/O 流的结构图</title>
      <link href="/21122802.html"/>
      <url>/21122802.html</url>
      
        <content type="html"><![CDATA[<hr><div class="mermaid">graph BTios_base(ios_base)--&gt;_Iosb(_Iosb)basic_ios(basic_ios)--&gt;ios_base(ios_base)basic_istream(basic_istream)--&gt;basic_ios(basic_ios)basic_ostream(basic_ostream)--&gt;basic_ios(basic_ios)basic_ifstream(basic_ifstream)--&gt;basic_istream(basic_istream)basic_istringstream(basic_istringstream)--&gt;basic_istream(basic_istream)basic_iostream(basic_iostream)--&gt;basic_istream(basic_istream)basic_ofstream(basic_ofstream)--&gt;basic_ostream(basic_ostream)basic_ostringstream(basic_ostringstream)--&gt;basic_ostream(basic_ostream)basic_iostream(basic_iostream)--&gt;basic_ostream(basic_ostream)basic_fstream(basic_fstream)--&gt;basic_iostream(basic_iostream)basic_stringstream(basic_stringstream)--&gt;basic_iostream(basic_iostream)</div><hr>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 常用命令</title>
      <link href="/21122801.html"/>
      <url>/21122801.html</url>
      
        <content type="html"><![CDATA[<hr><h2 id="查看端口占用并解除"><a href="#查看端口占用并解除" class="headerlink" title="查看端口占用并解除"></a>查看端口占用并解除</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法: lsof -i[46] [protocol][@hostname|hostaddr][:service|port]</span></span><br><span class="line"><span class="comment"># 查看 8000 端口占用情况</span></span><br><span class="line">lsof -i:8000</span><br><span class="line"><span class="comment"># 解除占用</span></span><br><span class="line"><span class="comment"># kill [pid] | kill -KILL [pid] 强制解除</span></span><br><span class="line"><span class="built_in">kill</span> -KILL 28939</span><br></pre></td></tr></table></figure><hr><h2 id="后台运行-解放终端"><a href="#后台运行-解放终端" class="headerlink" title="后台运行 解放终端"></a>后台运行 解放终端</h2><h3 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a>nohup</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># command 为需要运行的命令</span></span><br><span class="line">nohup <span class="built_in">command</span> &amp;</span><br><span class="line"><span class="comment"># 常用命令可以写一个脚本</span></span><br></pre></td></tr></table></figure><hr><h3 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># screen 适用于需要持续运行且随时需要操作的命令 列如 code-server</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启一个新的进程</span></span><br><span class="line">screen</span><br><span class="line"><span class="comment"># 运行命令</span></span><br><span class="line"><span class="built_in">command</span></span><br><span class="line"><span class="comment"># 让当前窗口进入后台</span></span><br><span class="line">Ctrl + A + D</span><br><span class="line"><span class="comment"># 查看所有后台进程</span></span><br><span class="line">screen -ls</span><br><span class="line"><span class="comment"># 进入后台进程</span></span><br><span class="line">screen -r id</span><br><span class="line"><span class="comment"># 关闭进程</span></span><br><span class="line"><span class="built_in">exit</span> | Ctrl + C</span><br><span class="line"><span class="comment"># 强制关闭</span></span><br><span class="line">screen -S id -X quit</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用软件分享</title>
      <link href="/21122201.html"/>
      <url>/21122201.html</url>
      
        <content type="html"><![CDATA[<hr><p><strong>本站资源仅供技术交流，请勿用于商业及非法用途，如产生法律纠纷与本站无关</strong></p><hr><h2 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h2><h3 id="录屏软件"><a href="#录屏软件" class="headerlink" title="录屏软件"></a>录屏软件</h3><details ><summary> ScnRec </summary>              <div class='content'>              <p><p>ScnRec 下载链接 : <a href="https://pan.baidu.com/s/1BmaF-VXxJv0-mnGpRIbRHQ">百度网盘</a>，提取码：trtt<br>使用说明：</p></p><p><ol></p><p><li>解压后阅读 <span class='p red'>注册信息.txt</span>，准备激活软件</li></p><p><li>双击 ScnRec.exe 运行，点击窗口下方 <span class='p yellow'>未注册</span> 字样，输入 <span class='p red'>注册信息.txt</span> 中的内容激活</li></p><p><li>选择录制功能，点击窗口自动截取，或手动截取窗口，最小化后按 <kbd>F8</kbd> 开始/停止录制</p>              </div>            </details></li></ol><hr><h2 id="装机达人"><a href="#装机达人" class="headerlink" title="装机达人"></a>装机达人</h2><h3 id="系统盘制作工具"><a href="#系统盘制作工具" class="headerlink" title="系统盘制作工具"></a>系统盘制作工具</h3><details ><summary> Rufus </summary>              <div class='content'>              <p><p>Rufus 下载链接 : <a href="https://pan.baidu.com/s/1Yg3UCKbqneIwJ-jkDvUTTw">百度网盘</a>，提取码：yjen<br>Rufus 是一款轻量的系统盘制作工具，只需连接U盘，选择镜像，点击开始，即可快速重装系统<br></p>              </div>            </details></p><hr>]]></content>
      
      
      <categories>
          
          <category> 资源分享 </category>
          
          <category> 软件资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资源分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frp 使用教程</title>
      <link href="/21122002.html"/>
      <url>/21122002.html</url>
      
        <content type="html"><![CDATA[<hr><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>frp 是一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。</strong></p><p><strong>frp 项目开源地址 : <a href="https://github.com/fatedier/frp">https://github.com/fatedier/frp</a></strong><br><strong>本文资源下载地址 :</strong></p><ul><li><strong><a href="https://cloud.mqawa.com/s/8efq">Cloudreve</a></strong></li><li><strong><a href="https://pan.baidu.com/s/1AERgN1Mr1gb7gwvuzsfYMw">百度网盘</a>，提取码：niit</strong></li></ul><hr><h2 id="frp-有什么用"><a href="#frp-有什么用" class="headerlink" title="frp 有什么用"></a>frp 有什么用</h2><ul><li>使用个人电脑搭建服务器</li><li>远程控制个人电脑</li><li>端口流量转发</li><li>数据代理</li></ul><hr><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li><strong>一台具有公网 ip 的服务器</strong></li><li><strong>ssh 工具</strong></li></ul><hr><h2 id="服务器安装配置-frp"><a href="#服务器安装配置-frp" class="headerlink" title="服务器安装配置 frp"></a>服务器安装配置 frp</h2><hr><h3 id="Linux-服务端"><a href="#Linux-服务端" class="headerlink" title="Linux 服务端"></a>Linux 服务端</h3><h4 id="查看-Linux-系统架构"><a href="#查看-Linux-系统架构" class="headerlink" title="查看 Linux 系统架构"></a>查看 Linux 系统架构</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure><p><img src="https://res.mqawa.cn/blog-res/images/server/frp/linux.png" alt=""></p><h4 id="下载对应版本-frp"><a href="#下载对应版本-frp" class="headerlink" title="下载对应版本 frp"></a>下载对应版本 frp</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.38.0/frp_0.38.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure><h4 id="解压并移动到-usr-local-目录"><a href="#解压并移动到-usr-local-目录" class="headerlink" title="解压并移动到 /usr/local 目录"></a>解压并移动到 /usr/local 目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf frp_0.38.0_linux_amd64.tar.gz</span><br><span class="line">mv frp_0.38.0_linux_amd64/ /usr/<span class="built_in">local</span>/frp</span><br></pre></td></tr></table></figure><h4 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/frp</span><br><span class="line">vim frps.ini</span><br></pre></td></tr></table></figure><p><strong>按 <kbd>i</kbd> 输入</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 7000           <span class="comment">#与客户端绑定的进行通信的端口</span></span><br></pre></td></tr></table></figure></p><p><strong>按 <kbd>Esc</kbd> 输入 :wq 回车保存退出</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#为 frps 赋予运行权限</span></span><br><span class="line">chmod +x frps </span><br><span class="line">./frps -c ./frps.ini</span><br></pre></td></tr></table></figure><br><img src="https://res.mqawa.cn/blog-res/images/server/frp/linux_start_success.png" alt=""><br><strong>启动成功</strong></p><h4 id="配置-frp-后台运行并开机启动"><a href="#配置-frp-后台运行并开机启动" class="headerlink" title="配置 frp 后台运行并开机启动"></a>配置 frp 后台运行并开机启动</h4><p><strong>按 <kbd>Ctrl</kbd> + <kbd>C</kbd> 中止 frp</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/systemd/system/frp.service</span><br></pre></td></tr></table></figure></p><p><strong>按 <kbd>i</kbd> 输入 粘贴下方代码</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Frp Server</span><br><span class="line">After=network.target</span><br><span class="line">Wants=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/frp/frps -c /usr/<span class="built_in">local</span>/frp/frps.ini</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p><p><strong>按 <kbd>Esc</kbd> 输入 :wq 回车保存退出</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重载 systemctl</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="comment"># 启动 frp</span></span><br><span class="line">systemctl start frp </span><br><span class="line"><span class="comment"># 查看 frp 状态</span></span><br><span class="line">systemctl status frp </span><br><span class="line"><span class="comment"># 设置开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> frp</span><br></pre></td></tr></table></figure><br><img src="https://res.mqawa.cn/blog-res/images/server/frp/status_success.png" alt=""><br><strong>启动成功</strong></p><hr><h3 id="Windows-服务端"><a href="#Windows-服务端" class="headerlink" title="Windows 服务端"></a>Windows 服务端</h3><h4 id="下载-frp-并解压"><a href="#下载-frp-并解压" class="headerlink" title="下载 frp 并解压"></a>下载 frp 并解压</h4><p><strong>win 报毒请忽略</strong><br><img src="https://res.mqawa.cn/blog-res/images/server/frp/win_frp.png" alt=""></p><h4 id="配置-frp-服务端"><a href="#配置-frp-服务端" class="headerlink" title="配置 frp 服务端"></a>配置 frp 服务端</h4><p><strong>打开 frps.ini, 输入以下内容</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 7000            #与客户端绑定的进行通信的端口</span><br></pre></td></tr></table></figure></p><p><strong>保存退出</strong><br><strong>在地址栏输入 cmd 回车打开</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frps.exe -c frps.ini</span><br></pre></td></tr></table></figure><p><strong>防火墙请放行</strong><br><img src="https://res.mqawa.cn/blog-res/images/server/frp/win_success.png" alt=""><br><strong>运行成功</strong></p><hr><h2 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h2><hr><h3 id="Linux-客户端"><a href="#Linux-客户端" class="headerlink" title="Linux 客户端"></a>Linux 客户端</h3><h4 id="查看-Linux-系统架构-1"><a href="#查看-Linux-系统架构-1" class="headerlink" title="查看 Linux 系统架构"></a>查看 Linux 系统架构</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure><p><img src="https://res.mqawa.cn/blog-res/images/server/frp/linux.png" alt=""></p><h4 id="下载对应版本-frp-1"><a href="#下载对应版本-frp-1" class="headerlink" title="下载对应版本 frp"></a>下载对应版本 frp</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.38.0/frp_0.38.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure><h4 id="解压并移动到-usr-local-目录-1"><a href="#解压并移动到-usr-local-目录-1" class="headerlink" title="解压并移动到 /usr/local 目录"></a>解压并移动到 /usr/local 目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf frp_0.38.0_linux_amd64.tar.gz</span><br><span class="line">mv frp_0.38.0_linux_amd64/ /usr/<span class="built_in">local</span>/frp</span><br></pre></td></tr></table></figure><h4 id="编辑配置文件-1"><a href="#编辑配置文件-1" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/frp</span><br><span class="line">vim frpc.ini</span><br></pre></td></tr></table></figure><p><strong>按 <kbd>i</kbd> 输入</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = xxx.xxx.xxx.xxx</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[ssh]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 22</span><br><span class="line">remote_port = 6000</span><br></pre></td></tr></table></figure><p><strong>配置文件详解</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = xxx.xxx.xxx.xxx   <span class="comment">#公网服务器 ip</span></span><br><span class="line">server_port = 7000            <span class="comment">#与服务端bind_port一致</span></span><br><span class="line"></span><br><span class="line">[ssh]                   <span class="comment">#连接名称</span></span><br><span class="line"><span class="built_in">type</span> = tcp              <span class="comment">#连接协议</span></span><br><span class="line">local_ip = 127.0.0.1    <span class="comment">#内网服务器ip</span></span><br><span class="line">local_port = 22         <span class="comment">#本地要公开的端口</span></span><br><span class="line">remote_port = 6000      <span class="comment">#服务器映射端口，可与本地端口不一致</span></span><br></pre></td></tr></table></figure><p><strong>按 <kbd>Esc</kbd> 输入 :wq 回车保存退出</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#为 frps 赋予运行权限</span></span><br><span class="line">chmod +x frpc</span><br><span class="line">./frpc -c ./frpc.ini</span><br></pre></td></tr></table></figure><p><img src="https://res.mqawa.cn/blog-res/images/server/frp/c_linux_start_success.png" alt=""><br><strong>启动成功</strong></p><h4 id="配置-frp-后台运行并开机启动-1"><a href="#配置-frp-后台运行并开机启动-1" class="headerlink" title="配置 frp 后台运行并开机启动"></a>配置 frp 后台运行并开机启动</h4><p><strong>按 <kbd>Ctrl</kbd> + <kbd>C</kbd> 中止 frp</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/systemd/system/frp.service</span><br></pre></td></tr></table></figure><p><strong>按 <kbd>i</kbd> 输入 粘贴下方代码</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Frp Client</span><br><span class="line">After=network.target</span><br><span class="line">Wants=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/frp/frpc -c /usr/<span class="built_in">local</span>/frp/frpc.ini</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p><strong>按 <kbd>Esc</kbd> 输入 :wq 回车保存退出</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重载 systemctl</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="comment"># 启动 frp</span></span><br><span class="line">systemctl start frp</span><br><span class="line"><span class="comment"># 查看 frp 状态</span></span><br><span class="line">systemctl status frp</span><br><span class="line"><span class="comment"># 设置开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> frp</span><br></pre></td></tr></table></figure><p><img src="https://res.mqawa.cn/blog-res/images/server/frp/c_status_success.png" alt=""><br><strong>启动成功</strong></p><hr><h3 id="Windows-客户端"><a href="#Windows-客户端" class="headerlink" title="Windows 客户端"></a>Windows 客户端</h3><h4 id="下载-frp-并解压-1"><a href="#下载-frp-并解压-1" class="headerlink" title="下载 frp 并解压"></a>下载 frp 并解压</h4><p><strong>win 报毒请忽略</strong><br><img src="https://res.mqawa.cn/blog-res/images/server/frp/win_frp.png" alt=""></p><h4 id="配置-frp-客户端"><a href="#配置-frp-客户端" class="headerlink" title="配置 frp 客户端"></a>配置 frp 客户端</h4><p><strong>打开 frpc.ini, 输入以下内容</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = xxx.xxx.xxx.xxx</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[ssh]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 3389</span><br><span class="line">remote_port = 3389</span><br></pre></td></tr></table></figure><p><strong>配置文件详解</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = xxx.xxx.xxx.xxx   <span class="comment">#公网服务器 ip</span></span><br><span class="line">server_port = 7000            <span class="comment">#与服务端bind_port一致</span></span><br><span class="line"></span><br><span class="line">[rdp]                   <span class="comment">#连接名称</span></span><br><span class="line"><span class="built_in">type</span> = tcp              <span class="comment">#连接协议</span></span><br><span class="line">local_ip = 127.0.0.1    <span class="comment">#内网服务器ip</span></span><br><span class="line">local_port = 3389       <span class="comment">#本地要公开的端口</span></span><br><span class="line">remote_port = 3389      <span class="comment">#服务器映射端口，可与本地端口不一致</span></span><br></pre></td></tr></table></figure><p><strong>保存退出</strong><br><strong>在地址栏输入 cmd 回车打开</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行frp 客户端</span></span><br><span class="line">frpc.exe -c frpc.ini</span><br></pre></td></tr></table></figure><p><strong>防火墙请放行</strong><br><img src="https://res.mqawa.cn/blog-res/images/server/frp/c_win_success.png" alt=""><br><strong>运行成功</strong></p><hr><h2 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h2><ul><li>frp 客户端可在一个文件内同时配置多个连接</li><li>客户端的一个端口可以被多个 frp 客户端监听</li><li>服务端的一个端口只能被一个 frp 服务端监听</li><li>frp 支持 TCP、UDP、HTTP、HTTPS 等多种协议</li><li>Linux 报错请确认下载版本正确且赋予 frp 运行权限</li><li>Windows Defender 会把 frpc.exe 识别为病毒并隔离，请手动恢复</li></ul><hr><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p><strong>现在，就可以在您的 公网ip:端口 访问您内网机器的服务了</strong><br><strong>有问题请在评论区留言，博主将会尽快处理</strong></p><hr>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>碎碎念 - Butterfly 的美化记录</title>
      <link href="/21122001.html"/>
      <url>/21122001.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="基于-Butterfly-的外挂标签引入"><a href="#基于-Butterfly-的外挂标签引入" class="headerlink" title="基于 Butterfly 的外挂标签引入"></a>基于 Butterfly 的外挂标签引入</h3><div class="note blue icon simple"><i class="note-icon fas fa-bullhorn"></i><p><a href="https://akilar.top/posts/615e2dec/">Akilar の糖果屋 - 基于 Butterfly 的外挂标签引入</a></p></div><h3 id="基于Butterfly主题的分类磁贴"><a href="#基于Butterfly主题的分类磁贴" class="headerlink" title="基于Butterfly主题的分类磁贴"></a>基于Butterfly主题的分类磁贴</h3><div class="note blue icon simple"><i class="note-icon fas fa-bullhorn"></i><p><a href="https://akilar.top/posts/a9131002/">Akilar の糖果屋 - 基于 Butterfly 主题的分类磁贴</a></p></div><h3 id="基于-Butterfly-主题的侧边栏电子钟"><a href="#基于-Butterfly-主题的侧边栏电子钟" class="headerlink" title="基于 Butterfly 主题的侧边栏电子钟"></a>基于 Butterfly 主题的侧边栏电子钟</h3><div class="note blue icon simple"><i class="note-icon fas fa-bullhorn"></i><p><a href="https://akilar.top/posts/4e39cf4a/">Akilar の糖果屋 - 基于 Butterfly 主题的侧边栏电子钟</a></p></div><h3 id="Butterfly-主题版权美化"><a href="#Butterfly-主题版权美化" class="headerlink" title="Butterfly 主题版权美化"></a>Butterfly 主题版权美化</h3><div class="note blue icon simple"><i class="note-icon fas fa-bullhorn"></i><p><a href="https://akilar.top/posts/8322f8e6/">Akilar の糖果屋 - Butterfly 主题版权美化</a></p></div><h3 id="部分细节"><a href="#部分细节" class="headerlink" title="部分细节"></a>部分细节</h3><details ><summary> 部分细节优化 </summary>              <div class='content'>              <p><p><strong>分割线颜色</strong><br><strong>卡片背景透明</strong><br><strong>头图和页脚透明</strong><br><strong>top-img 移除玻璃效果</strong><br><strong>Twikoo 高度和隐藏图片</strong><br><strong>夜间模式伪类遮罩层透明</strong></p></p><details ><summary> css代码（贰猹的搬运工） </summary>              <div class='content'>              <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Twikoo 魔改  高度和隐藏图片</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.tk-input</span><span class="selector-attr">[data-v-619b4c52]</span></span><br><span class="line">  <span class="selector-class">.el-textarea__inner</span>&#123;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">180px</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.el-textarea__inner</span><span class="selector-pseudo">:focus</span>&#123;</span><br><span class="line">      <span class="attribute">background-image</span>: none <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * top-img黑色透明玻璃效果移除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="selector-id">#page-header</span><span class="selector-class">.post-bg</span>:before &#123;</span><br><span class="line">  background-color: transparent<span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 头图透明</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="selector-id">#page-header</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent<span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 页脚透明</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="selector-id">#footer</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: transparent<span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 夜间模式伪类遮罩层透明</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#footer</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent<span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#page-header</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent<span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 卡片背景透明度</span></span><br><span class="line"><span class="comment"> * 分割线颜色 hr-border</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="comment">/* --card-bg: #fff; */</span></span><br><span class="line">  --card-bg: <span class="number">#ffefef</span>d9;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="comment">/* --card-bg: #121212; */</span></span><br><span class="line">  --card-bg: <span class="number">#121212</span>88;</span><br><span class="line">  --btn-hover-<span class="attribute">color</span>: <span class="number">#787878</span>;</span><br><span class="line">  --btn-bg: <span class="number">#1f1f1f</span>;</span><br><span class="line">  <span class="comment">/* --font-color: rgba(255,255,255,0.7); */</span></span><br><span class="line">  <span class="comment">/* --hr-border: rgba(255,255,255,0.4); */</span></span><br><span class="line">  --<span class="attribute">font</span>-<span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">  --hr-<span class="attribute">border</span>: <span class="built_in">rgb</span>(<span class="number">153</span>,<span class="number">204</span>,<span class="number">255</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details><div class="note blue icon simple"><i class="note-icon fas fa-bullhorn"></i><p><a href="https://noionion.top/10567.html">贰猹の小窝 - 个人哔哔：我的 butterfly 魔改记录</a></p></div><h3 id="Twikoo-表情放大"><a href="#Twikoo-表情放大" class="headerlink" title="Twikoo 表情放大"></a>Twikoo 表情放大</h3><details ><summary> Twikoo 表情放大 </summary>              <div class='content'>              <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 引入 css */</span></span><br><span class="line"><span class="selector-class">.tk-owo-emotion</span>&#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">100px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="侧边按钮圆角处理"><a href="#侧边按钮圆角处理" class="headerlink" title="侧边按钮圆角处理"></a>侧边按钮圆角处理</h3><details ><summary> 侧边按钮圆角处理 </summary>              <div class='content'>              <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 引入 css */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 设置按钮</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-id">#rightside_config</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 回到顶部按钮</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-id">#go-up</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 隐藏侧边栏按钮</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-id">#hide-aside-btn</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 简繁转换按钮</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-id">#translateLink</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 阅读模式按钮</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-id">#readmode</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 评论按钮</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-id">#to_comment</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 列表按钮</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-id">#mobile-toc-button</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="流程图背景透明"><a href="#流程图背景透明" class="headerlink" title="流程图背景透明"></a>流程图背景透明</h3><details ><summary> 流程图背景透明 </summary>              <div class='content'>              <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 引入 css */</span></span><br><span class="line"><span class="selector-class">.mermaid</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent<span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><hr>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>沟通的艺术</title>
      <link href="/21121702.html"/>
      <url>/21121702.html</url>
      
        <content type="html"><![CDATA[<hr><div class="note blue icon simple"><i class="note-icon fas fa-arrow-circle-left"></i><p><a href="https://blog.mqawa.cn/videos/">返回视频导航页</a></p></div><hr><div class="video"><video controls preload><source src='https://res.mqawa.cn/blog-res/videos/talk.mp4' type='video/mp4'>Your browser does not support the video tag.</video></div>]]></content>
      
      
      <categories>
          
          <category> 玩得开心 </category>
          
          <category> videos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> videos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些乱七八糟的问题</title>
      <link href="/21120602.html"/>
      <url>/21120602.html</url>
      
        <content type="html"><![CDATA[<hr><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>一些闲来无事写的小代码，没有独立写文的必要，就都放在这里了</strong></p><hr><h2 id="重载-to-string"><a href="#重载-to-string" class="headerlink" title="重载 to_string"></a>重载 to_string</h2><details ><summary> 重载to_string使得map，vector等容器可以转化为string字符串 </summary>              <div class='content'>              <p><p><strong>使用 ostringstream 进行链式字符串拼接</strong></p><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">to_string</span><span class="params">(string str)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V&gt;</span></span><br><span class="line"><span class="function">string <span class="title">to_string</span><span class="params">(<span class="keyword">const</span> pair&lt;K, V&gt;&amp; p)</span> </span>&#123;</span><br><span class="line">ostringstream o;</span><br><span class="line">o &lt;&lt; <span class="built_in">to_string</span>(p.first) &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; <span class="built_in">to_string</span>(p.second);</span><br><span class="line"><span class="keyword">return</span> o.<span class="built_in">str</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">string <span class="title">to_string</span><span class="params">(<span class="keyword">const</span> T&amp; begin, <span class="keyword">const</span> T&amp; end)</span> </span>&#123;</span><br><span class="line">ostringstream o;</span><br><span class="line"><span class="keyword">for</span> (T it = begin; it != end; ++it) &#123;</span><br><span class="line"><span class="keyword">if</span> (it != begin)</span><br><span class="line">o &lt;&lt; <span class="string">&quot;, &quot;</span>;</span><br><span class="line">o &lt;&lt; <span class="built_in">to_string</span>(*it);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> o.<span class="built_in">str</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V&gt;</span></span><br><span class="line"><span class="function">string <span class="title">to_string</span><span class="params">(<span class="keyword">const</span> map&lt;K, V&gt;&amp; m)</span> </span>&#123;</span><br><span class="line">ostringstream o;</span><br><span class="line">o &lt;&lt; <span class="string">&quot;&#123; &quot;</span> &lt;&lt; <span class="built_in">to_string</span>(m.<span class="built_in">begin</span>(), m.<span class="built_in">end</span>()) &lt;&lt; <span class="string">&quot; &#125;&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> o.<span class="built_in">str</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">string <span class="title">to_string</span><span class="params">(<span class="keyword">const</span> vector&lt;T&gt;&amp; v)</span> </span>&#123;</span><br><span class="line">ostringstream o;</span><br><span class="line">o &lt;&lt; <span class="string">&quot;[ &quot;</span> &lt;&lt; <span class="built_in">to_string</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>()) &lt;&lt; <span class="string">&quot; ]&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> o.<span class="built_in">str</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">map&lt;string, string&gt; m;</span><br><span class="line">m.<span class="built_in">insert</span>(pair&lt;string, string&gt;(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;test&quot;</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(pair&lt;string, string&gt;(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;22&quot;</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(pair&lt;string, string&gt;(<span class="string">&quot;sex&quot;</span>, <span class="string">&quot;男&quot;</span>));</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> &#125;;</span><br><span class="line">cout &lt;&lt; <span class="built_in">to_string</span>(m) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="built_in">to_string</span>(v) &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>              </div>            </details><hr><h2 id="cout-输出true-false"><a href="#cout-输出true-false" class="headerlink" title="cout 输出true, false"></a>cout 输出true, false</h2><details ><summary> 使cout输出true，false而不是1，0 </summary>              <div class='content'>              <p><p><strong>在默认情况下，cout会将true, false转换为1, 0输出，而不是输出true, false</strong></p></p><p><p><strong>解决： 使用boolalpha，头文件iostream</strong></p></p><p><p><strong>当使用boolalpha后，以后的bool类型结果都将以true或false形式输出，除非使用 noboolalpha取消 boolalpha流的格式标志</strong></p><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;boolalpha&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; boolalpha;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;true : &quot;</span> &lt;&lt; <span class="literal">true</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;false : &quot;</span> &lt;&lt; <span class="literal">false</span> &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;noboolalpha&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; noboolalpha;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;true : &quot;</span> &lt;&lt; <span class="literal">true</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;false : &quot;</span> &lt;&lt; <span class="literal">false</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>              </div>            </details><hr><h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><details ><summary> 函数指针的使用 </summary>              <div class='content'>              <p><p><strong>函数指针的定义：函数返回值类型 (* 指针变量名) (函数参数列表);</strong></p><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;&#125;</span><br><span class="line"><span class="built_in"><span class="keyword">void</span></span> (*p)(<span class="keyword">int</span>);<span class="comment">//定义了一个返回值为void，参数列表为int，且只有一个参数的函数指针</span></span><br><span class="line">p = func;<span class="comment">//指向函数</span></span><br></pre></td></tr></table></figure></p><p><p><strong>函数指针的使用</strong></p><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in"><span class="keyword">void</span></span>(*p)(<span class="keyword">int</span>) = func;</span><br><span class="line"><span class="built_in">p</span>(<span class="number">1</span>);<span class="comment">//理解：函数名就是指针，所以使用函数指针与使用函数一样</span></span><br><span class="line">(*p)(<span class="number">1</span>);<span class="comment">//理解：指针p指向函数，所以要解析指针</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>              </div>            </details><hr><h2 id="构造和析构函数是否可以为虚函数？"><a href="#构造和析构函数是否可以为虚函数？" class="headerlink" title="构造和析构函数是否可以为虚函数？"></a>构造和析构函数是否可以为虚函数？</h2><details ><summary> 构造和析构函数是否可以为虚函数？ </summary>              <div class='content'>              <p><p><strong>构造函数不可以为虚函数，析构函数可以</strong></p></p><details ><summary> 为什么构造函数不可以为虚函数 </summary>              <div class='content'>              <p><strong>虚函数的调用需要虚函数表指针，而该指针存放在对象的内容空间中；若构造函数声明为虚函数，那么由于对象还未创建，还没有内存空间，更没有虚函数表地址用来调用虚函数——构造函数了。</strong></p>              </div>            </details><details ><summary> 为什么析构函数可以为虚函数 </summary>              <div class='content'>              <p><strong>当要使用基类指针或引用调用子类时，最好将基类的析构函数声明为虚函数，否则可能存在内存泄露的问题。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Base</span>() &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;make Base&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Base</span>() &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;del Base&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Son</span>() &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;make Son&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Son</span>() &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;del Son&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Base* p = <span class="keyword">new</span> <span class="built_in">Son</span>();</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://res.mqawa.cn/blog-res/images/cpp/emmm/cons01.png" alt="构造01"></p><p><strong>根据输出可见，Son的析构函数未被调用，存在内存泄露问题，将Base类的析构函数声明为虚函数即可解决</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Base</span>() &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;make Base&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">Base</span>() &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;del Base&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Son</span>() &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;make Son&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Son</span>() &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;del Son&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Base* p = <span class="keyword">new</span> <span class="built_in">Son</span>();</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://res.mqawa.cn/blog-res/images/cpp/emmm/cons02.png" alt="构造01"></p>              </div>            </details>              </div>            </details><hr><h2 id="成员变量初始化顺序"><a href="#成员变量初始化顺序" class="headerlink" title="成员变量初始化顺序"></a>成员变量初始化顺序</h2><details ><summary> 成员变量初始化顺序 </summary>              <div class='content'>              <p><strong>成员变量的声明顺序，决定了成员变量的初始化顺序。假设 Date 类中的构造函数为：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Date</span>() : <span class="built_in">y</span>(<span class="number">2016</span>), <span class="built_in">m</span>(<span class="number">2</span>), <span class="built_in">d</span>(<span class="number">4</span>) &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>此时，成员变量，在类中的声明顺序 = 构造函数初始化列表顺序，故 y, m, d 都能被顺利的 初始化为对应的值。</strong></p><p><strong>而当成员变量，在类中的声明顺序 ≠ 构造函数初始化列表顺序 时，如下：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Date</span>() : <span class="built_in">y</span>(<span class="number">2016</span>), <span class="built_in">d</span>(<span class="number">4</span>), <span class="built_in">m</span>(d<span class="number">-2</span>) &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>根据成员变量的声明顺序，y 首先被初始化为 2016，然后再初始化 m，但由于 d 并未被初始 化，所以 m 的值是随机的，最后初始化 d 为 4</strong></p><p><strong>因为，<span class='p red'>类的成员变量在初始化时，其初始化的顺序只与声明顺序有关，而与初始化顺序无关。</span></strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Date</span>() :<span class="built_in">y</span>(<span class="number">2021</span>), <span class="built_in">d</span>(<span class="number">4</span>), <span class="built_in">m</span>(d - <span class="number">2</span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;y : &quot;</span> &lt;&lt; y &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;m : &quot;</span> &lt;&lt; m &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;d : &quot;</span> &lt;&lt; d &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> y, m, d;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Date date;</span><br><span class="line">date.<span class="built_in">printDate</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://res.mqawa.cn/blog-res/images/cpp/emmm/init.png" alt="初始化"></p>              </div>            </details><hr><h2 id="C-的函数重载"><a href="#C-的函数重载" class="headerlink" title="C++的函数重载"></a>C++的函数重载</h2><details ><summary> C++的函数重载 </summary>              <div class='content'>              <ul><li><p><strong>为什么要进行函数重载</strong></p><ul><li><strong>为了简化编程</strong></li><li><strong>提高编程效率</strong></li><li><strong>增加代码可读性</strong></li></ul></li><li><p><strong>函数重载的规则</strong></p><ul><li><strong>函数名相同</strong></li><li><strong>函数的参数列表不同（参数个数，类型，顺序不同等）</strong></li><li><strong>函数的返回值可以不同</strong></li><li><strong>仅仅返回类型不同不足以成为函数的重载</strong></li></ul></li><li><p><strong>命名倾轧</strong></p><ul><li><strong>C++函数重载底层实现原理是C++利用name mangling(倾轧)技术，来改名函数 名，区分参数不同的同名函数。</strong></li><li><strong>编译器通过函数名和其参数类型识别重载函数。为了保证类型安全的连接（typesafe linkage），编译器用参数个数和参数类型对每一个函数标识符进行专门编 码，这个过程有时称为“名字改编”（name mangling）或“名字修饰”（name decoration）。类型安全的连接使得程序能够调用合适的重载函数并保证了参数 传递的一致性。编译器能够检测到并报告连接错误。</strong></li></ul></li><li><p><strong>查看符号表</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">func</span><span class="params">(<span class="keyword">double</span> a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>使用 g++ -c 只编译不链接，生成目标文件</strong></p></li><li><p><strong>使用 nm 查看目标文件（.o）</strong></p><p><img src="https://res.mqawa.cn/blog-res/images/cpp/emmm/nm.png" alt="重载"></p></li></ul></li></ul>              </div>            </details><hr>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重载流操作符时遇到的问题（输出自定义数据类型到文件）</title>
      <link href="/21120601.html"/>
      <url>/21120601.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="如下代码，将Test类通过重载流操作符输出到文件，编译时会报错（二义性）"><a href="#如下代码，将Test类通过重载流操作符输出到文件，编译时会报错（二义性）" class="headerlink" title="如下代码，将Test类通过重载流操作符输出到文件，编译时会报错（二义性）"></a>如下代码，将Test类通过重载流操作符输出到文件，编译时会报错（二义性）</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Test</span>(<span class="keyword">int</span> num) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;num = num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ofstream&amp; <span class="keyword">operator</span>&lt;&lt;(ofstream&amp; ofs, <span class="keyword">const</span> Test&amp; test) &#123;</span><br><span class="line">ofs &lt;&lt; test.num;</span><br><span class="line"><span class="keyword">return</span> ofs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">ofstream <span class="title">ofs</span><span class="params">(<span class="string">&quot;test.txt&quot;</span>, ios::out | ios::trunc)</span></span>;</span><br><span class="line">ofs &lt;&lt; <span class="built_in">Test</span>(<span class="number">10</span>) &lt;&lt; endl;</span><br><span class="line">ofs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">write</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://res.mqawa.cn/blog-res/images/cpp/overload_stream/error.png" alt=""></p><hr><h3 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h3><ul><li><p><strong>std内置函数</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp;, <span class="keyword">const</span> <span class="keyword">int</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>自定义函数</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ofstream&amp; <span class="keyword">operator</span>&lt;&lt;(ofstream&amp; ofs, <span class="keyword">const</span> Test&amp; test);</span><br></pre></td></tr></table></figure></li><li><p><strong>当运行到</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ofs &lt;&lt; test.num;</span><br></pre></td></tr></table></figure></li><li><p><strong>&lt;&lt; 运算符的两个参数类型分别为（ofstream，int）</strong></p></li><li><p><strong>对于内置函数，第一个参数为父类引用指向子类对象（ostream -&gt; ofstream），第二个参数完全匹配。</strong></p></li><li><p><strong>对于自定义函数，第一个参数完全匹配，第二个参数因为Test类的构造函数可以隐式调用。Test test = 1; 是合法的</strong></p></li><li><p><strong>编译器不知道调用哪个函数来处理这个语句</strong></p></li></ul><hr><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><ul><li><p><strong>将构造函数前加explicit关键字，使构造函数不可进行隐式转换</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">Test</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;num = num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>将 &lt;&lt; 的参数改为 ostream，重载ostream即可</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; ofs, <span class="keyword">const</span> Test&amp; test) &#123;</span><br><span class="line">ofs &lt;&lt; test.num;</span><br><span class="line"><span class="keyword">return</span> ofs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前置自增（减）和后置自增（减）的区别以 及效率</title>
      <link href="/21120101.html"/>
      <url>/21120101.html</url>
      
        <content type="html"><![CDATA[<hr><h3 id="两者的区别"><a href="#两者的区别" class="headerlink" title="两者的区别"></a><strong>两者的区别</strong></h3><ul><li><strong>《C专家编程》中说道：“ ++x 表示取 x 的地址，增加它的内容，然后把值放到寄存器中，x++ 则表示取 x 的地址，把他的值装入寄存器中，然后增加内存中的 x 的值”。</strong></li><li><strong>前置自增（减）返回的是对象的引用，后置自增（减）返回的是对象的拷贝，这就意味着对前置自增（减）的操作会操作对象本身，而后置自增（减）不会。</strong></li><li><strong>在现代 IDE 中，会优化内置数据类型，统一为前置自增（减），来优化性能，但是对于自定义数据类型的重载，前置自增（减）效率优于后置自增（减）。</strong></li></ul><hr><h3 id="为什么前置自增（减）优于后置自增（减）"><a href="#为什么前置自增（减）优于后置自增（减）" class="headerlink" title="为什么前置自增（减）优于后置自增（减）"></a><strong>为什么前置自增（减）优于后置自增（减）</strong></h3><ul><li><p><strong>对于内置数据类型，我们查看反汇编</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    ++i;</span><br><span class="line">    i++;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><img src="https://res.mqawa.cn/blog-res/images/cpp/inc/int.png" alt=""></p></li><li><p><strong>我们发现，运算流程相同，说明编译器对后置自增（减）运算进行了优化</strong></p></li></ul></li><li><p><strong>对于自定义数据类型，我们重载自增（减）运算符后查看反汇编</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Test</span>() :<span class="built_in">num</span>(<span class="number">0</span>) &#123;&#125;;</span><br><span class="line">Test <span class="keyword">operator</span>++(<span class="keyword">int</span>) &#123;<span class="comment">//后置自增</span></span><br><span class="line"><span class="keyword">this</span>-&gt;num++;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">Test&amp; <span class="keyword">operator</span>++() &#123;<span class="comment">//前置自增</span></span><br><span class="line"><span class="keyword">this</span>-&gt;num++;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Test t;</span><br><span class="line">++t;</span><br><span class="line">t++;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><img src="https://res.mqawa.cn/blog-res/images/cpp/inc/Test.png" alt=""></li></ul></li><li><p><strong>或者可以通关禁用拷贝构造函数的方式进行验证</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Test</span>() :<span class="built_in">num</span>(<span class="number">0</span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">Test <span class="keyword">operator</span>++(<span class="keyword">int</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;num++;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Test&amp; <span class="keyword">operator</span>++() &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;num++;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">Test</span>(<span class="keyword">const</span> Test&amp; test);<span class="comment">//禁用拷贝构造函数</span></span><br><span class="line">Test&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Test&amp; test);<span class="comment">//禁用赋值运算符</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Test t;</span><br><span class="line">++t;</span><br><span class="line">t++;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><img src="https://res.mqawa.cn/blog-res/images/cpp/inc/error.png" alt=""></p></li><li><p><strong>会发现后置自增（减）链接错误，说明后置自增（减）调用了拷贝构造函数</strong></p></li></ul></li><li><p><strong>总结：不考虑返回值的话，前置自增（减）在编译器不优化的情况下，效率会优 于后置自增（减），因为后置自增（减）会对数据进行一次拷贝，如果数据为自定义数据类型或者为迭代器等，拷贝的代价会非常大，当前置和后置的功能一样时，优先使用前置自增（减）。</strong></p></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visual Assist X 安装和破解</title>
      <link href="/21120102.html"/>
      <url>/21120102.html</url>
      
        <content type="html"><![CDATA[<p>本站资源仅供技术交流，请勿用于商业及非法用途，如产生法律纠纷与本站无关</p><hr><h3 id="官网链接"><a href="#官网链接" class="headerlink" title="官网链接"></a>官网链接</h3><p><strong>Visual Assist X 官网：</strong><a href="https://www.wholetomato.com/">https://www.wholetomato.com/</a> </p><p><strong>Everything 官网：</strong><a href="https://www.voidtools.com/zh-cn/">https://www.voidtools.com/zh-cn/</a></p><hr><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><strong>如果已安装 Visual Assist X 请先卸载</strong></p><p><strong>扩展-&gt;管理扩展-&gt;已安装-&gt;Visual Assist X-&gt;卸载-&gt;关闭Visual Studio-&gt;等待卸载完成</strong></p><p><strong>下载 Visual Assist X 破解文件 + Everything ：</strong></p><ul><li><a href="http://cloud.mqawa.com/s/jdTg">Cloudreve</a></li><li><a href="https://pan.baidu.com/s/1aOO8UDlJTCwScXvoUtINLw">百度网盘</a> <strong>提取码：t7mm</strong></li></ul><p><strong>下载解压，安装Everything 和 Visual Assist X</strong></p><p><img src="https://res.mqawa.cn/blog-res/images/share/software/devtools/visual_assist_x/1.png" alt="everything"><img src="https://res.mqawa.cn/blog-res/images/share/software/devtools/visual_assist_x/2.png" alt="visual assist"></p><hr><h3 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h3><p><strong>打开 Everything，搜索 VA_X.dll，如果安装多个版本的 Visual Studio，会检索到多个 VA_X.dll，需要全部替换</strong></p><p><strong>我的路径为 ： C:\Users\CtrlZ\AppData\Local\Microsoft\VisualStudio\16.0_45dbff82\Extensions\5tmzqshx.03l</strong></p><p><strong>无法使用 Everything 可以参考路径寻找</strong></p><p><img src="https://res.mqawa.cn/blog-res/images/share/software/devtools/visual_assist_x/3.png" alt="搜索结果"></p><p><strong>把解压好的VA_X.dll，替换到打开的路径，破解完成</strong></p><hr>]]></content>
      
      
      <categories>
          
          <category> 资源分享 </category>
          
          <category> 软件资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资源分享 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
